#head(df_tmc_moses_gb$treeid[df_tmc_moses_gb$stand == "Kielder~1~10"])
df_tmc_moses_gb$year <- as.factor(df_tmc_moses_gb$year)
#length(df_tmc_moses_gb$treeid[df_tmc_moses_gb$stand== "Clocaenog~1~3" & df_tmc_moses_gb$year == 2218])
#levels(df_tmc_moses_gb$year)
#Calculating spacing per site per year (using loops -bad! Use data.table library instead! see below):
#for (i in levels(df_tmc_moses_gb$stand)) { #create objects with numbers of stems per site per year
#  for (j in levels(df_tmc_moses_gb$year)) {
#    assign(paste0("stem_no_", i , "_", j), length(df_tmc_moses_gb$treeid[df_tmc_moses_gb$stand == i & df_tmc_moses_gb$year == j]))
#  }
#}
#for (i in 1:length(df_tmc_moses_gb$treeid)) { #add a column in the df_tmc_moses_gb data frame with the numbers of stems per site per year
#  df_tmc_moses_gb$stem_no[i] <- get(paste0("stem_no_", df_tmc_moses_gb$stand[i], "_", df_tmc_moses_gb$year[i]))
#}
#Calculating stand mean height per site per year. Spacing and stand top height require knowledge of plot area:
library(data.table)
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_mean_ht := mean(tree_ht), by = .(stand, year)][])
#Calculating stand mean dbh per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_mean_dbh := mean(dbh), by = .(stand, year)][])
#Calculating stems number per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stem_no := length(tree_ht), by = .(stand, year)][])
#Calculating mean spacing per site per year:
df_tmc_moses_gb$plot_area_ha <- ifelse(df_tmc_moses_gb$stand == "Clocaenog~1~3", 1, 0.29) #add column to df with plot areas in ha
df_tmc_moses_gb$spacing <- sqrt((df_tmc_moses_gb$plot_area_ha * 10^4) / df_tmc_moses_gb$stem_no) #add column to df with mean spacing
#Calculating stand top height per site per year (mean height of 100 tallest trees per hectare)
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, ranked_tree_ht := sort(tree_ht, decreasing = TRUE), by = .(stand, year)][]) #add ranked height column to df with ranked trees by tree height, per site per yeat
df_tmc_moses_gb$st_y <- paste0(df_tmc_moses_gb$stand,"-", df_tmc_moses_gb$year) #create tag for standXyear combination
stand_top_ht <- as.numeric()
for (i in which(!duplicated(df_tmc_moses_gb$st_y))) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
length(df_tmc_moses_gb)
stand_top_ht <- append(stand_top_ht, rep(NA, width(df_tmc_moses_gb)))
length(df_tmc_moses_gb$treeid)
length(stand_top_ht)
length(df_tmc_moses_gb$treeid) - length(stand_top_ht)
df_tmc_moses_gb$stand_top_ht <- stand_top_ht
df_tmc_moses_gb$stand_top_ht <- stand_top_ht
stand_top_ht <- append(stand_top_ht, rep(NA, (length(df_tmc_moses_gb$treeid) - length(stand_top_ht))))
df_tmc_moses_gb$stand_top_ht <- stand_top_ht
df_tmc_moses_gb$st_y <- NULL
df_tmc_moses_gb$ranked_tree_ht <- NULL
rm(stand_top_ht)
rm(i)
devtools::load_all()
library(tidyr)#this and Rcpp for "unnesting" the dataframe of lists output generated by the vectorised fg_rou
library(Rcpp)
fg_tmc_v <- Vectorize(fg_tmc)
stand_id <- as.character(df_tmc_moses_gb$stand)
tree_id <- as.character(df_tmc_moses_gb$treeid)
date <- as.Date(df_tmc_moses_gb$date)
tree_ht <- df_tmc_moses_gb$tree_height
tree_ht <- df_tmc_moses_gb$tree_ht
dbh <- df_tmc_moses_gb$dbh
spacing_current <- df_tmc_moses_gb$spacing
stand_mean_ht <- df_tmc_moses_gb$stand_mean_ht
stand_top_ht <- df_tmc_moses_gb$stand_top_ht
stand_mean_dbh <- df_tmc_moses_gb$stand_mean_dbh
cr_depth <- df_tmc_moses_gb$cr_depth
#Calculating mean crown depth per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_cr_depth := mean(cr_depth), by = .(stand, year)][])
stand_cr_depth <- df_tmc_moses_gb$stand_cr_depth
gap_size <- 0
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
species <- as.character(df_tmc_moses_gb$species)
df_tmc_moses_gb$species[df_tmc_moses_gb$species == 'Sitka'] <- 'SS'
levels(df_tmc_moses_gb$species)
levels(df_tmc_moses_gb$species)[1] <- 'SS'
df_tmc_moses_gb$species
levels(df_tmc_moses_gb$species)
#moses-gb data####
df_tmc_moses_gb <- read.csv("F:/tom.locatelli/Software/ForestGALES-R scripts/mgb_for_fgr.csv", header = TRUE)
levels(df_tmc_moses_gb$species)[1] <- 'SS'
levels(df_tmc_moses_gb$species) <- 'SS'
df_tmc_moses_gb$date <- as.Date(paste0(df_tmc_moses_gb$year, '-01-01'))
#df_tmc_moses_gb$year <- NULL
df_tmc_moses_gb$cr_depth <- df_tmc_moses_gb$h - df_tmc_moses_gb$hlc
df_tmc_moses_gb$hlc <- NULL
names(df_tmc_moses_gb)[names(df_tmc_moses_gb) == 'h'] <- 'tree_ht'
#summary(df_tmc_moses_gb$stand)
#head(df_tmc_moses_gb$treeid[df_tmc_moses_gb$stand == "Kielder~1~10"])
df_tmc_moses_gb$year <- as.factor(df_tmc_moses_gb$year)
#Calculating stand mean height per site per year. Spacing and stand top height require knowledge of plot area:
library(data.table)
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_mean_ht := mean(tree_ht), by = .(stand, year)][])
#Calculating stand mean dbh per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_mean_dbh := mean(dbh), by = .(stand, year)][])
#Calculating stems number per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stem_no := length(tree_ht), by = .(stand, year)][])
#Calculating mean spacing per site per year:
df_tmc_moses_gb$plot_area_ha <- ifelse(df_tmc_moses_gb$stand == "Clocaenog~1~3", 1, 0.29) #add column to df with plot areas in ha
df_tmc_moses_gb$spacing <- sqrt((df_tmc_moses_gb$plot_area_ha * 10^4) / df_tmc_moses_gb$stem_no) #add column to df with mean spacing
#Calculating mean crown depth per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_cr_depth := mean(cr_depth), by = .(stand, year)][])
#Calculating stand top height per site per year (mean height of 100 tallest trees per hectare)
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, ranked_tree_ht := sort(tree_ht, decreasing = TRUE), by = .(stand, year)][]) #add ranked height column to df with ranked trees by tree height, per site per yeat
df_tmc_moses_gb$st_y <- paste0(df_tmc_moses_gb$stand,"-", df_tmc_moses_gb$year) #create tag for standXyear combination
stand_top_ht <- as.numeric()
for (i in which(!duplicated(df_tmc_moses_gb$st_y))) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
stand_top_ht <- append(stand_top_ht, rep(NA, (length(df_tmc_moses_gb$treeid) - length(stand_top_ht))))
df_tmc_moses_gb$stand_top_ht <- stand_top_ht
df_tmc_moses_gb$st_y <- NULL
df_tmc_moses_gb$ranked_tree_ht <- NULL
rm(stand_top_ht)
rm(i)
devtools::load_all()
library(tidyr)#this and Rcpp for "unnesting" the dataframe of lists output generated by the vectorised fg_rou
library(Rcpp)
fg_tmc_v <- Vectorize(fg_tmc)
stand_id <- as.character(df_tmc_moses_gb$stand)
tree_id <- as.character(df_tmc_moses_gb$treeid)
date <- as.Date(df_tmc_moses_gb$date)
species <- as.character(df_tmc_moses_gb$species)
tree_ht <- df_tmc_moses_gb$tree_ht
dbh <- df_tmc_moses_gb$dbh
spacing_current <- df_tmc_moses_gb$spacing
stand_mean_ht <- df_tmc_moses_gb$stand_mean_ht
stand_top_ht <- df_tmc_moses_gb$stand_top_ht
stand_mean_dbh <- df_tmc_moses_gb$stand_mean_dbh
cr_depth <- df_tmc_moses_gb$cr_depth
stand_cr_depth <- df_tmc_moses_gb$stand_cr_depth
gap_size <- 0
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
essentials
which(!duplicated(df_tmc_moses_gb$st_y))
df_tmc_moses_gb$st_y <- paste0(df_tmc_moses_gb$stand,"-", df_tmc_moses_gb$year) #create tag for standXyear combination
which(!duplicated(df_tmc_moses_gb$st_y))
#moses-gb data####
df_tmc_moses_gb <- read.csv("F:/tom.locatelli/Software/ForestGALES-R scripts/mgb_for_fgr.csv", header = TRUE)
levels(df_tmc_moses_gb$species) <- 'SS'
df_tmc_moses_gb$date <- as.Date(paste0(df_tmc_moses_gb$year, '-01-01'))
#df_tmc_moses_gb$year <- NULL
df_tmc_moses_gb$cr_depth <- df_tmc_moses_gb$h - df_tmc_moses_gb$hlc
df_tmc_moses_gb$hlc <- NULL
names(df_tmc_moses_gb)[names(df_tmc_moses_gb) == 'h'] <- 'tree_ht'
#summary(df_tmc_moses_gb$stand)
#head(df_tmc_moses_gb$treeid[df_tmc_moses_gb$stand == "Kielder~1~10"])
df_tmc_moses_gb$year <- as.factor(df_tmc_moses_gb$year)
#Calculating stand mean height per site per year. Spacing and stand top height require knowledge of plot area:
library(data.table)
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_mean_ht := mean(tree_ht), by = .(stand, year)][])
#Calculating stand mean dbh per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_mean_dbh := mean(dbh), by = .(stand, year)][])
#Calculating stems number per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stem_no := length(tree_ht), by = .(stand, year)][])
#Calculating mean spacing per site per year:
df_tmc_moses_gb$plot_area_ha <- ifelse(df_tmc_moses_gb$stand == "Clocaenog~1~3", 1, 0.29) #add column to df with plot areas in ha
df_tmc_moses_gb$spacing <- sqrt((df_tmc_moses_gb$plot_area_ha * 10^4) / df_tmc_moses_gb$stem_no) #add column to df with mean spacing
#Calculating mean crown depth per site per year:
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, stand_cr_depth := mean(cr_depth), by = .(stand, year)][])
#Calculating stand top height per site per year (mean height of 100 tallest trees per hectare)
df_tmc_moses_gb <- as.data.frame(setDT(df_tmc_moses_gb)[, ranked_tree_ht := sort(tree_ht, decreasing = TRUE), by = .(stand, year)][]) #add ranked height column to df with ranked trees by tree height, per site per yeat
df_tmc_moses_gb$st_y <- paste0(df_tmc_moses_gb$stand,"-", df_tmc_moses_gb$year) #create tag for standXyear combination
stand_top_ht <- as.numeric()
changes_st_y <- which(!duplicated(df_tmc_moses_gb$st_y)) #where the unique values of st_y appear firs
?index
match_st_y <- match(!duplicated(df_tmc_moses_gb$st_y))
match_st_y <- match(changes_st_y)
match_st_y <- match(!duplicated(df_tmc_moses_gb$st_y), changes_st_y)
changes_st_y[1]
changes_st_y[2]
rm(match_st_y)
for (i in changes_st_y) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
stand_top_ht[changes_st_y[1]:(changes_st_y[2]- 1)] <- stand_top_ht[changes_st_y[1]]
stand_top_ht[440:460]
length(changes_st_y)
for (i in changes_st_y) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
stand_top_ht <- as.numeric()
for (i in changes_st_y) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
#stand_top_ht <- append(stand_top_ht, rep(NA, (length(df_tmc_moses_gb$treeid) - length(stand_top_ht))))
for (j in 1:length(changes_st_y)){
stand_top_ht[changes_st_y[j]:(changes_st_y[j+1]- 1)] <- stand_top_ht[changes_st_y[j]]
}
changes_st_y[j]
changes_st_y[j+1]
length(changes_st_y)
changes_st_y
changes_st_y <- c(which(!duplicated(df_tmc_moses_gb$st_y)), length(df_tmc_moses_gb$treeid) #where the unique values of st_y appear first
)
changes_st_y
length(changes_st_y)
length(changes_st_y)-1)
length(changes_st_y)-1
stand_top_ht <- as.numeric()
changes_st_y <- c(which(!duplicated(df_tmc_moses_gb$st_y)), length(df_tmc_moses_gb$treeid)) #where the unique values of st_y appear first
for (i in changes_st_y) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
#stand_top_ht <- append(stand_top_ht, rep(NA, (length(df_tmc_moses_gb$treeid) - length(stand_top_ht))))
for (j in 1:(length(changes_st_y)-1)){
stand_top_ht[changes_st_y[j]:(changes_st_y[j+1]- 1)] <- stand_top_ht[changes_st_y[j]]
}
tail(stand_top_ht)
stand_top_ht[length(stand_top_ht)]
stand_top_ht[length(stand_top_ht)-1]
stand_top_ht[length(stand_top_ht)] <- stand_top_ht[length(stand_top_ht)-1]
tail(stand_top_ht)
df_tmc_moses_gb$stand_top_ht <- stand_top_ht
changes_st_y <- c(which(!duplicated(df_tmc_moses_gb$st_y)), (length(df_tmc_moses_gb$treeid)+1)) #where the unique values of st_y appear first, plus the
changes_st_y
for (i in changes_st_y) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
changes_st_y <- c(which(!duplicated(df_tmc_moses_gb$st_y)), length(df_tmc_moses_gb$treeid)) #where the unique values of st_y appear first, plus the
stand_top_ht <- as.numeric()
for (i in changes_st_y) { #go through
#df_tmc_moses_gb$stand_top_ht[i]
stand_top_ht[i] <- mean(df_tmc_moses_gb$ranked_tree_ht[i :(i + round(100*df_tmc_moses_gb$plot_area_ha[i]) -1)])
}
for (j in 1:(length(changes_st_y)-1)){
stand_top_ht[changes_st_y[j]:(changes_st_y[j+1]- 1)] <- stand_top_ht[changes_st_y[j]]
}
stand_top_ht[length(stand_top_ht)] <- stand_top_ht[length(stand_top_ht)-1]
df_tmc_moses_gb$stand_top_ht <- stand_top_ht
df_tmc_moses_gb$st_y <- NULL
df_tmc_moses_gb$ranked_tree_ht <- NULL
rm(stand_top_ht)
rm(changes_st_y)
rm(i)
rm(j)
devtools::load_all()
library(tidyr)#this and Rcpp for "unnesting" the dataframe of lists output generated by the vectorised fg_rou
library(Rcpp)
fg_tmc_v <- Vectorize(fg_tmc)
stand_id <- as.character(df_tmc_moses_gb$stand)
tree_id <- as.character(df_tmc_moses_gb$treeid)
date <- as.Date(df_tmc_moses_gb$date)
species <- as.character(df_tmc_moses_gb$species)
tree_ht <- df_tmc_moses_gb$tree_ht
dbh <- df_tmc_moses_gb$dbh
spacing_current <- df_tmc_moses_gb$spacing
stand_mean_ht <- df_tmc_moses_gb$stand_mean_ht
stand_top_ht <- df_tmc_moses_gb$stand_top_ht
stand_mean_dbh <- df_tmc_moses_gb$stand_mean_dbh
cr_depth <- df_tmc_moses_gb$cr_depth
stand_cr_depth <- df_tmc_moses_gb$stand_cr_depth
gap_size <- 0
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.21, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 14.21, 5.9e+09, 2.5, 850, 0, 150)
22.31/13.21
22.31/14.21
22.31/14
22.31/1.6
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.94375, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.22, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.21, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.22, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.23, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.24, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.25, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.26, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.27, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.28, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.30, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.301, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.5, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 13.9, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 14, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 15, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 16, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 17, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 18, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 19, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 20, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 30, 5.9e+09, 2.5, 850, 0, 150)
dlf_fun(8382.10492332494, 22.31, 12.95, 2.42, 0.160042930811819, 40, 5.9e+09, 2.5, 850, 0, 150)
devtools::load_all()
fg_tmc_v <- Vectorize(fg_tmc)
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
devtools::load_all()
fg_tmc_v <- Vectorize(fg_tmc)
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size)))
tidy_out <- unnest(out_tmc_moses_gb)
write.csv(tidy_out, file = "F:/tom.locatelli/Software/RStudio/fgr/testing/out_tmc_moses_gb.csv")
rm(tidy_out)
df <- df_tmc_moses_gb
df$year <- NULL
df_tmc_moses_gb$year <- NULL
devtools::use_data(df_tmc_moses_gb, pkg = ".", overwrite = TRUE)
tidy_out <- unnest(out_tmc_moses_gb)
which(tidy_out$dlf_calc < 0)
length(which(tidy_out$dlf_calc < 0))
length(which(tidy_out$dlf_calc < 1))
bads <- tidy_out[which(tidy_out$dlf_calc < 1)]
bads <- tidy_out[which(tidy_out$dlf_calc < 1), ]
summary(bads$dlf_calc)
summary(bads$dlf_used)
bads <- df_tmc_moses_gb[which(tidy_out$dlf_calc < 1), ]
summary(bads$tree_ht)
summary(bads$dbh)
summary(bads$tree_ht / bads$dbh)
bads_plus <- df_tmc_moses_gb[which(tidy_out$dlf_calc > 2.5), ]
summary(bads_plus)
bads_plus <- tidy_out[which(tidy_out$dlf_calc > 2.5), ]
summary(bads_plus$dlf_calc)
which(bads_plus$dlf_calc > 100)
which(bads_plus$dlf_calc > 1000)
which(bads_plus$dlf_calc > 10000)
bads_plus[3180]
bads_plus[3180,]
summary(bads_plus$tree_ht / bads_plus$dbh)
summary(bads$tree_ht / bads$dbh)
df_tmc_moses_gb[which((bads_plus$tree_ht / bads_plus$dbh) == 1.106)]
which((bads_plus$tree_ht / bads_plus$dbh) == 1.106)
df_tmc_moses_gb[which((bads_plus$tree_ht / bads_plus$dbh) == 1.106),]
summary(bads_plus$tree_ht / bads_plus$dbh)
which((bads_plus$tree_ht / bads_plus$dbh) == 1.106)
which((bads_plus$tree_ht / bads_plus$dbh) < 1.108)
df_tmc_moses_gb[which((bads_plus$tree_ht / bads_plus$dbh) < 1.108),]
df_tmc_moses_gb[which((bads_plus$tree_ht / bads_plus$dbh) < 1.107),]
summary(bads$tree_ht / bads$dbh)
bads[which((bads$tree_ht / bads$dbh) < 1.107),]
which((bads$tree_ht / bads$dbh) < 1.107)
bads_plus[which((bads_plus$tree_ht / bads_plus$dbh) < 1.107),]
summary(bads$tree_ht / bads$dbh)
bads[which((bads$tree_ht / bads$dbh) < 1.410),]
bads_plus[which((bads_plus$tree_ht / bads_plus$dbh) > 2.323),]
bads_plus[which((bads_plus$tree_ht / bads_plus$dbh) > 2.3),]
summary(bads_plus$tree_ht / bads_plus$dbh)
bads_plus[which((bads_plus$tree_ht / bads_plus$dbh) < 1.107),]
summary(bads$tree_ht / bads$dbh)
bads_plus[which((bads$tree_ht / bads$dbh) < 2.323),]
bads_plus[which((bads$tree_ht / bads$dbh) > 2.323),]
summary(bads$tree_ht / bads$dbh)
bads_plus[which((bads$tree_ht / bads$dbh) > 2.3),]
bads_plus[which((bads$tree_ht / bads$dbh) > 2.32),]
bads[which((bads$tree_ht / bads$dbh) > 2.32),]
length(bads)
nrow(bads)
nrow(bads) + nrow(bads_plus)
nrow(df_tmc_moses_gb) / (nrow(bads) + nrow(bads_plus))
nrow(df_tmc_moses_gb) - (nrow(bads) + nrow(bads_plus))
(nrow(df_tmc_moses_gb) - (nrow(bads) + nrow(bads_plus))) / nrow(df_tmc_moses_gb)
wrongs <- tidy_out[which(tidy_out$dlf_calc / tidy_out$lf_used != 1)]
wrongs <- tidy_out[which(tidy_out$dlf_calc / tidy_out$lf_used != 1),]
(nrow(df_tmc_moses_gb) - (nrow(wrongs)) / nrow(df_tmc_moses_gb)
(nrow(df_tmc_moses_gb) - nrow(wrongs)) / nrow(df_tmc_moses_gb)
write.csv(df_tmc_moses_gb, file = "F:/tom.locatelli/Software/RStudio/fgr/testing/df_tmc_moses_gb.csv")
rm(bads)
rm(bads_plus)
rm(df)
rm(wrongs)
rm(tidy_out)
rm(out_tmc_moses_gb)
fgr_constants
devtools::load_all()
fg_tmc_v <- Vectorize(fg_tmc)
fg_tmc_v <- Vectorize(fg_tmc)
x <- df_tmc_moses_gb$x
y <- df_tmc_moses_gb$y
start_time <- Sys.time()
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size, x = x, y = y)))
fgr_constants
devtools::load_all()
library(tidyr)#this and Rcpp for "unnesting" the dataframe of lists output generated by the vectorised fg_rou
library(Rcpp)
fg_tmc_v <- Vectorize(fg_tmc)
start_time <- Sys.time()
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size, x = x, y = y)))
model_end_time <- Sys.time()
tidy_out <- unnest(out_tmc_moses_gb)
tidy_time <- Sys.time()
write.csv(tidy_out, file = "F:/tom.locatelli/Software/RStudio/fgr/testing/out_tmc_moses_gb.csv")
write.time <- Sys.time()
print("runs time:")
model_end_time - start_time
print("tidying time:")
tidy_time - model_end_time
print("time until tyding:")
tidy_time - start_time
print("total.time:")
write.time - start_time
fgr_constants$dlf
devtools::load_all()
fg_tmc_v <- Vectorize(fg_tmc)
start_time <- Sys.time()
out_tmc_moses_gb <- as.data.frame(t(fg_tmc_v(stand_id = stand_id, tree_id = tree_id, date = date, species = species, tree_ht = tree_ht, dbh = dbh,
spacing_current = spacing_current, predominant_species = species, stand_mean_ht = stand_mean_ht,
stand_mean_dbh = stand_mean_dbh, stand_top_ht = stand_top_ht, full_output = 1, cr_depth = cr_depth,
stand_cr_depth = stand_cr_depth, gap_size = gap_size, x = x, y = y)))
model_end_time <- Sys.time()
tidy_out <- unnest(out_tmc_moses_gb)
tidy_time <- Sys.time()
write.csv(tidy_out, file = "F:/tom.locatelli/Software/RStudio/fgr/testing/out_tmc_moses_gb.csv")
write.time <- Sys.time()
print("runs time:")
model_end_time - start_time
print("tidying time:")
tidy_time - model_end_time
print("time until tyding:")
tidy_time - start_time
print("total.time:")
write.time - start_time
write.csv(df_tmc_moses_gb, file = "F:/tom.locatelli/Software/ForestGALES-R Scripts/df_tmc_moses_gb.csv")
devtools::use_data(df_tmc_moses_gb, pkg = ".", overwrite = TRUE)
\begin{align}
u(h)_{crit\_break} = \frac{1}{D}\sqrt{\frac{\pi \cdot MOR \cdot dbh^3 \cdot f_{knot}}{32 \rho G d DLF}} \cdot \gamma
\end{align}
getwd()
#build####
devtools::build(pkg = ".", path = "F:/tom.locatelli/Software/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#build####
devtools::build(pkg = ".", path = "F:/tom.locatelli/Software/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#build####
devtools::build(pkg = ".", path = "F:/tom.locatelli/Software/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#build####
devtools::build(pkg = ".", path = "F:/tom.locatelli/Software/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#data####
species_parameters <- read.csv("F:/tom.locatelli/Software/ForestGALES-R scripts/species_parameters.csv", header = TRUE, row.names = 1)
devtools::use_data(species_parameters, pkg = ".", internal = TRUE, overwrite = TRUE)
#build####
devtools::build(pkg = ".", path = "F:/tom.locatelli/Software/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#data####
species_parameters <- read.csv("C:/Program Files/RStudio/fgr/ForestGALES-R scripts/species_parameters.csv", header = TRUE, row.names = 1)
fgr_constants <- read.csv("C:/Program Files/RStudio/fgr/ForestGALES-R scripts/fgr_constants.csv", header = TRUE)
devtools::use_data(species_parameters, fgr_constants, pkg = ".", internal = TRUE, overwrite = TRUE)
rm(species_parameters)
rm(fgr_constants)
#build####
devtools::build(pkg = ".", path = "C:/Program Files/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#build####
devtools::build(pkg = ".", path = "C:/Program Files/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
#build####
devtools::build(pkg = ".", path = "C:/Program Files/RStudio/fgr/builds", binary = TRUE, vignettes = TRUE)
?canopy_breadth_b
desi <- c(1, 5, NA)
sw <- 100
msw <- 80
default_warning <- ifelse(anyNA(desi), "defw", NA) #"Warning: some inputs were set to default values"
desi <- c(1, 5, 8)
default_warning <- ifelse(anyNA(desi), "defw", NA) #"Warning: some inputs were set to default values"
desi <- c(1, 5, NA)
default_warning <- ifelse(anyNA(desi), "defw", NA) #"Warning: some inputs were set to default values"
max_stem_weight_warning <- ifelse(sw > msw, "msw", NA)
fgr_warnings <- paste0(default_warning, "_", max_stem_weight_warning)
desi <- c(1, 5, 8)
default_warning <- ifelse(anyNA(desi), "defw", NA) #"Warning: some inputs were set to default values"
fgr_warnings <- paste0(default_warning, "_", max_stem_weight_warning)
msw <- 120
max_stem_weight_warning <- ifelse(sw > msw, "msw", NA)
fgr_warnings <- paste0(default_warning, "_", max_stem_weight_warning)
install.packages("roxygen2")
fgr_constants$cs
fgr::fgr_constants$cs
1/sqrt(fgr::fgr_constants$cs + fgr::fgr_constants$cr*0.3)
#data####
species_parameters <- read.csv("C:/Program Files/RStudio/fgr/ForestGALES-R scripts/species_parameters_SP_DF.csv", header = TRUE, row.names = 1)
fgr_constants <- read.csv("C:/Program Files/RStudio/fgr/ForestGALES-R scripts/fgr_constants.csv", header = TRUE)
devtools::use_data(species_parameters, fgr_constants, pkg = ".", internal = TRUE, overwrite = TRUE)
rm(species_parameters)
rm(fgr_constants)
?round
round(0.123, 1)
round(123.5, 0)
ceiling(123.5, 0)
ceiling(123.5)
floor(123.5)
trunc(123.5)
trunc(123.3)
trunc(123.6)
trunc(123.6)
trunc(123.4)
ceiling(123.4)
round(1.5, 1)
round(1.5)
round(2.5)
round(3.5)
.libPaths()
